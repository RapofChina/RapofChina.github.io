<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: objc | sunnyxx's]]></title>
  <link href="http://sunnyxx.github.io/blog/categories/objc/atom.xml" rel="self"/>
  <link href="http://sunnyxx.github.io/"/>
  <updated>2013-09-23T01:38:16+08:00</updated>
  <id>http://sunnyxx.github.io/</id>
  <author>
    <name><![CDATA[Sunny Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[新objc之Modules和@import]]></title>
    <link href="http://sunnyxx.github.io/blog/2013/09/22/xin-objczhi-at-import/"/>
    <updated>2013-09-22T23:37:00+08:00</updated>
    <id>http://sunnyxx.github.io/blog/2013/09/22/xin-objczhi-at-import</id>
    <content type="html"><![CDATA[<p>若熟悉python的话<code>Module</code>的概念应该也不会陌生，如:
``` python</p>

<pre><code>import json
import os.path
from sys import * // 这随便写的
</code></pre>

<p><code>``
如今新objc也加入了</code>Module`的概念</p>

<hr />

<p>还记得过去的时候如何引入并使用一个framework么？首先，需要把需要的framework添加到工程里来:<br/>
<img class="center" src="/images/2-1.png" width="400" height="460"> <br/>
然后就可以在代码里<code>#import</code>并开始使用<br/>
``` objc</p>

<pre><code>#import &lt;QuartzCore/QuartzCore.h&gt;
...
self.view.layer.borderWidth = 1.0f;
</code></pre>

<p>```
<strong>会带来什么问题?</strong></p>

<p>问题1. 预编译时大量重复的文本拷贝<br/>
<img class="center" src="/images/2-2.png" width="600" height="400" title="&ldquo;原引WWDC2013 Session404 PDF&rdquo;" > <br/>
如上图，MyApp.m直接引用了<code>iAd</code>和<code>UIKit</code>两个framework，而<code>iAd</code>内部同时又间接引用了<code>UIKit</code>。当编译器开始预处理MyApp.m时，会将所有<code>iAd</code>和<code>UIKit</code>的<strong>.h</strong>文件一并copy到MyApp.m头部，随后进行编译和链接过程，这直接造成的结果是，预处理之后的<strong>.m</strong>文件的体积远不止里面写着的代码：<br/>
<img class="center" src="/images/2-3.png" width="600" height="400" title="&ldquo;原引WWDC2013 Session404 PDF&rdquo;" > <br/>
由此引发的编译时间复杂度也会成比例增长，而同时一个工程内也不可能只有一个<strong>.m</strong>文件和只引用一个framework，Session中指出这个趋势大概为：<br/>
<code>M source files + N headers ⇒ M x N compile time</code></p>

<p>问题2. 头文件容易受污染<br/>
这里就不引图了，意思是外部引用一个framework前不会清楚里面都用到过哪些符号啊，变量啊，define啊，在不知情的情况下可能会定义了一个和内部冲突的符号从而引发framework内部的异常，而这经常是很莫名其妙的。（我好像就遇到过）</p>

<p>问题3. pch预编译头也不能完全解决问题<br/>
工程里的<code>.pch</code>(pre-compiled-header)里可以加入<code>UIKit</code>和<code>Fundation</code>使工程里面所有文件都可以引用到，缓解了大量重复framework头文件拷贝的问题，但是Session中还提到了些带来的问题，比如<strong>Maintenance burden(维护负担)</strong>和<strong>Namespace pollution(命名域污染)</strong>，维护这个不太理解，namesapce污染大概就是指明明不需要而且不想用到这个framework的地方也一样能引用到。我自己理解的一个问题是使得代码结构变得不合理，明明只和一个framework耦合的模块变成了和所有pch中的framework耦合。</p>

<hr />

<p><strong>说了这么多没用的终于到主题了</strong>
<code>Modules</code>简而言之就是将所有系统framework<code>单例化</code>了，不知道这么理解对不对，<strong>不论是代码中还是框架中甚至是系统运行依赖中所指向的同一个framework都是一份</strong>，与代码分开编译，通过api调用直接指向dylib的实现部分<br/>
<img class="center" src="/images/2-4.png" width="300" title="&ldquo;原引WWDC2013 Session404 PDF&rdquo;" > <br/>
与此而来的是新的语法<code>@import</code>:<br/>
```objc</p>

<pre><code>@import UIKit   // #import &lt;UIKit/UIKit.h&gt;
@import UIKit.UIView // #import &lt;UIKit/UIView.h&gt;
// 上面两种写法与注释的写法等价
</code></pre>

<p><code>``
语法很简单，Xcode5的编译器已经可以识别并自动补全了。  
使用新的</code>Modules<code>和</code>@import`已经解决了之前提出的问题，与此同时还带了些<strong>很赞的好处</strong></p>

<p><strong>1. 不用去手动添加framework啦！Module自动给干了</strong>
<img class="center" src="/images/2-5.png" width="400" title="&ldquo;原引WWDC2013 Session404 PDF&rdquo;" ></p>

<p><strong>2. 不用多写一行代码就能完成转换</strong><br/>
<img class="center" src="/images/2-6.png" width="800" title="&ldquo;原引WWDC2013 Session404 PDF&rdquo;" > <br/>
当然前提是只能适用于系统framework而且得是iOS7 SDK/OS 10.9 SDK</p>

<p><strong>3. 带来的编译时间的提升</strong>
<img class="center" src="/images/2-7.png" width="600" title="&ldquo;原引WWDC2013 Session404 PDF&rdquo;" > <br/>
<img class="center" src="/images/2-8.png" width="600" title="&ldquo;原引WWDC2013 Session404 PDF&rdquo;" ><br/>
这也是感觉Xcode5编ios7感觉很快的原因之一</p>

<hr />

<p><strong>总结</strong><br/>
WWDC2013中介绍的新<code>Module</code>和<code>@import</code>确实是不错的改进，相比于其带来的性能提升，它的成本基本可以不计。我是决定以后的项目都用<code>@import</code>来引用系统框架了，清晰明了，和自己的header能区分开来，使用新SDK的同学们赶快入手吧~</p>

<hr />

<p>by<code>sunnyxx</code><strong>欢迎转载，转载请注明作者和来源地址(本地址)</strong> ：）</p>
]]></content>
  </entry>
  
</feed>
